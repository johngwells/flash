[
  { 
    "id" : "arr1",
    "createdBy" : "master",
    "createdOn" : "2017-12-13T09:52:28",
    "modifiedBy" : "master",
    "modifiedOn" : "2017-12-13T09:52:28",
    "group" : "master",
    "category" : "JavaScript",
    "frontcard" : { 
      "item" : "includes()" 
    },
    "backcard" : {
      "definition" : "includes() determines whether an array includes a certain element. returns TRUE or FALSE.",
      "example" : "let a = [1,2,3] a.includes(2) // true a.includes(4) // false",
      "syntax" : "arr.includes(searchElement, fromIndex)"
    }
  }, {
    "id" : "arr2",
    "createdBy" : "master",
    "createdOn" : "2017-12-13T09:52:28",
    "modifiedBy" : "master",
    "modifiedOn" : "2017-12-13T09:52:28",
    "group" : "master",
    "category" : "JavaScript",
    "frontcard" : {
      "item" : "indexOf()" 
    },
    "backcard" : {
      "definition" : "indexOf() returns the first index at which a given element can be found in the array. Returns -1 if it is not found.",
      "example" : "let a = [1,2,3] a.indexOf(2) // 1 a.indexOf(4) // -1",
      "syntax" : "arr.indexOf(searchElement [, fromIndex])"
    }
  }, {
    "id" : "arr3",
    "createdBy" : "master",
    "createdOn" : "2017-12-13T09:52:28",
    "modifiedBy" : "master",
    "modifiedOn" : "2017-12-13T09:52:28",
    "group" : "master",
    "category" : "JavaScript",
    "frontcard" : { 
      "item" : "slice()" 
    },
    "backcard" : {
      "definition" : "slice() returns a shallow COPY of a portion of an array into a new array object selected from BEGIN (Inclusive) to END (Non-Inclusive). ORIGINAL ARRAY NOT MUTATED.",
      "example" : "let a = ['zero', 'one', 'two','three'] let sliced = a.slice(1,3) a = ['zero', 'one', 'two','three'] sliced = ['one', 'two']",
      "syntax" : "arr.slice(beginIndex, endIndex)"
    }
  }, {
    "id" : "arr4",
    "createdBy" : "master",
    "createdOn" : "2017-12-13T09:52:28",
    "modifiedBy" : "master",
    "modifiedOn" : "2017-12-13T09:52:28",
    "group" : "master",
    "category" : "JavaScript",
    "frontcard" : { 
      "item" : "splice()" 
    },
    "backcard" : {
      "definition" : "splice() changes the contents of an array by removing existing elements and/or adding new elements.",
      "example" : "let numbers = ['zero', 'one', 'two', 'three'] numbers.splice(2, 0, 'BANANA') // inserts banana at index-2 // numbers = ['zero', 'one', 'BANANA', 'two', 'three'] numbers.splice(2,1) // removes 1 item starting at index-2 // numbers = numbers = ['zero', 'one', 'three'] ",
      "syntax" : "arr.splice(start, deleteCount, item to add to array)"
    }
  }, {
    "id" : "arr5",
    "createdBy" : "master",
    "createdOn" : "2017-12-13T09:52:28",
    "modifiedBy" : "master",
    "modifiedOn" : "2017-12-13T09:52:28",
    "group" : "master",
    "category" : "JavaScript",
    "frontcard" : {
      "item" : "every()" 
    },
    "backcard" : {
      "definition" : "every() tests whether ALL ELEMENTS in the array pass the test implemented by the provided function.",
      "example" : "function isBigEnough(element, index, array) { return element >= 10 } [2, 4 , 6, 8].every(isBigEnough) // false [12, 14, 16, 18].every(isBigEnough) // true",
      "syntax" : "arr.every(callback)"
    }
  }, {
    "id" : "str1",
    "createdBy" : "master",
    "createdOn" : "2017-12-13T09:52:28",
    "modifiedBy" : "master",
    "modifiedOn" : "2017-12-13T09:52:28",
    "group" : "master",
    "category" : "JavaScript",
    "frontcard" : { 
      "item" : "charAt()" 
    },
    "backcard" : {
      "definition" : "charAt() returns the specified character from a string. If no index is provided, charAt() will use index-0. Will return and empty string if index is out of range.",
      "example" : "let str = 'abc' str.charAt(1) // 'b' str.charAt(5) // '' ",
      "syntax" : "str.charAt(index)"
    }
  }, {
    "id" : "str2",
    "createdBy" : "master",
    "createdOn" : "2017-12-13T09:52:28",
    "modifiedBy" : "master",
    "modifiedOn" : "2017-12-13T09:52:28",
    "group" : "master",
    "category" : "JavaScript",
    "frontcard" : { 
      "item" : "concat()" 
    },
    "backcard" : {
      "definition" : "concat() combines the text of one or more strings and returns a NEW String. ORIGINAL STRING NOT MUTATED.",
      "example" : "let str = 'abc' str.concat('def', 'ghi') // 'abcdefghi'",
      "syntax" : "str.concat(string2[,string3, ..., stringN])"
    }
  }, {
    "id" : "str3",
    "createdBy" : "master",
    "createdOn" : "2017-12-13T09:52:28",
    "modifiedBy" : "master",
    "modifiedOn" : "2017-12-13T09:52:28",
    "group" : "master",
    "category" : "JavaScript",
    "frontcard" : { 
      "item" : "includes()" 
    },
    "backcard" : {
      "definition" : "includes() determines whether one string may be found within another string, returning TRUE or FALSE. CASE SENSITIVE",
      "example" : "let str = 'abcdefg' str.includes('def') // True str.includes('fghi') // False",
      "syntax" : "str.includes(searchString[, startIndex])"
    }
  }, {
    "id" : "str4",
    "createdBy" : "master",
    "createdOn" : "2017-12-13T09:52:28",
    "modifiedBy" : "master",
    "modifiedOn" : "2017-12-13T09:52:28",
    "group" : "master",
    "category" : "JavaScript",
    "frontcard" : { 
      "item" : "slice()" 
    },
    "backcard" : {
      "definition" : "slice() extracts a section of a string, from BEGIN (Inclusive) to END (Non-Inclusive), and returns it as a NEW String. ORIGINAL STRING NOT MUTATED.",
      "example" : "let str = 'abcdefg' str.slice(0,3) // 'abc'",
      "syntax" : "str.slice(beginIndex[, endIndex])"
    }
  }, {
    "id" : "str5",
    "createdBy" : "master",
    "createdOn" : "2017-12-13T09:52:28",
    "modifiedBy" : "master",
    "modifiedOn" : "2017-12-13T09:52:28",
    "group" : "master",
    "category" : "JavaScript",
    "frontcard" : { 
      "item" : "substr()" 
    },
    "backcard" : {
      "definition" : "substr() returns the characters in a string beginning at the specified location (index) through the specified number (length) of characters (inclusive).",
      "example" : "let str = 'abcdefg' str.substr(0, 3) // 'abc' str.substr(1, 3) // 'bcd' str.substr( -3 ) // 'efg'",
      "syntax" : "str.substr(start, [length])"
    }
  }, {
    "id" : "str6",
    "createdBy" : "master",
    "createdOn" : "2017-12-13T09:52:28",
    "modifiedBy" : "master",
    "modifiedOn" : "2017-12-13T09:52:28",
    "group" : "master",
    "category" : "JavaScript",
    "frontcard" : { 
      "item" : "substring()" 
    },
    "backcard" : {
      "definition" : "substring() returns a subset of a string between one index START (inclusive) and another END (Non-Inclusive), or through the end of the string (if indexEnd is omitted).",
      "example" : " let str = 'abcdefg' str.substring(0, 3) // 'abc' str.substring(4,7) // 'efg'",
      "syntax" : "str.substring(indexStart, [indexEnd])"
    }
  }, {
    "id" : "html1",
    "createdBy" : "master",
    "createdOn" : "2017-12-13T09:52:28",
    "modifiedBy" : "master",
    "modifiedOn" : "2017-12-13T09:52:28",
    "group" : "master",
    "category" : "HTML",
    "frontcard" : {
      "item" : "template"
    },
    "backcard" : {
      "definition" : "an HTML template must include...",
      "example" : "<html> <head> </head> <body> </body>",
      "syntax" : "braces and closed braces"
    }
  }, {
    "id" : "css1",
    "createdBy" : "master",
    "createdOn" : "2017-12-13T09:52:28",
    "modifiedBy" : "master",
    "modifiedOn" : "2017-12-13T09:52:28",
    "group" : "master",
    "category" : "CSS3",
    "frontcard" : {
      "item" : "components"
    },
    "backcard" : {
      "definition" : "css is composed of the following elements:...",
      "example" : "...",
      "syntax" : "..."
    }
  }
]
